package eg.edu.alexu.csd.oop.jdbc.jdbc;

import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.SQLWarning;
import java.sql.Statement;
import java.util.ArrayList;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

import eg.edu.alexu.csd.oop.jdbc.interfaces.IDBMS;
import eg.edu.alexu.csd.oop.jdbc.system.DBMS;

public class JDBCStatement implements Statement {

	private IDBMS dbms;
	private ArrayList<String> batch;
	private boolean opened;
	private Connection connection;
	private ResultSet resultSet;

	private final Logger log = LogManager.getLogger(JDBCStatement.class);

	public JDBCStatement(final String path, final String fileType, final Connection connection)
			throws Exception {
		this.dbms = new DBMS(path, fileType);
		this.opened = true;
		this.batch = new ArrayList<String>();
		this.connection = connection;
	}

	@Override
	public void addBatch(final String sql) throws SQLException {
		if (!opened) {
			log.error("Invalid use of a closed statement.");
			throw new SQLException("This statement is closed.");
		}
		log.info("SQL command is added to the batch.");
		batch.add(sql);
	}

	@Override
	public void cancel() throws SQLException {
		throw new UnsupportedOperationException();

	}

	@Override
	public void clearBatch() throws SQLException {
		if (!opened) {
			log.error("Invalid use of a closed statement.");
			throw new SQLException("This statement is closed.");
		}
		log.info("Batch is cleared.");
		batch = new ArrayList<String>();
	}

	@Override
	public void clearWarnings() throws SQLException {
		throw new UnsupportedOperationException();

	}

	@Override
	public void close() throws SQLException {
		log.info("Statement is closed.");
		opened = false;
	}

	@Override
	public void closeOnCompletion() throws SQLException {
		throw new UnsupportedOperationException();

	}

	@Override
	public boolean execute(final String sql) throws SQLException {
		if (!opened) {
			log.error("Invalid use of a closed statement.");
			throw new SQLException("This statement is closed.");
		}

		log.info("SQL command was executed.");
		if (dbms.isQueryCommand(sql)) {
			executeQuery(sql);
			return dbms.getSelectedData().get(0).size() != 0;
		}

		executeUpdate(sql);
		return false;
	}

	@Override
	public boolean execute(final String sql, final int autoGeneratedKeys)
			throws SQLException {
		throw new UnsupportedOperationException();

	}

	@Override
	public boolean execute(final String sql, final int[] columnIndexes) throws SQLException {
		throw new UnsupportedOperationException();

	}

	@Override
	public boolean execute(final String sql, final String[] columnNames)
			throws SQLException {
		throw new UnsupportedOperationException();

	}

	@Override
	public int[] executeBatch() throws SQLException {
		if (!opened) {
			log.error("Invalid use of a closed statement.");
			throw new SQLException("This statement is closed.");
		}

		int[] ret = new int[batch.size()];
		for (int i = 0; i < batch.size(); ++i) {
			if (dbms.isQueryCommand(batch.get(i))) {
				executeQuery(batch.get(i));
				ret[i] = -1;
			} else {
				ret[i] = executeUpdate(batch.get(i));
			}
		}
		log.info("Batch was executed.");
		return ret;
	}

	@Override
	public ResultSet executeQuery(final String sql) throws SQLException {
		if (!opened) {
			log.error("Invalid use of a closed statement.");
			throw new SQLException("This statement is closed.");
		}

		try {
			dbms.execute(sql);
		} catch (Exception e) {
			log.error(e.getMessage());
			throw new SQLException(e.getMessage());
		}

		return resultSet = new JDBCResultSet(dbms.getSelectedTableName(),
				dbms.getSelectedColumnNames(), dbms.getSelectedColumnTypes(),
				dbms.getSelectedData(), this);
	}

	@Override
	public int executeUpdate(final String sql) throws SQLException {
		if (!opened) {
			log.error("Invalid use of a closed statement.");
			throw new SQLException("This statement is closed.");
		}

		try {
			dbms.execute(sql);
		} catch (Exception e) {
			log.error(e.getMessage());
			throw new SQLException(e.getMessage());
		}
		log.info("Update command was executed.");
		return getUpdateCount();
	}

	@Override
	public int executeUpdate(final String sql, final int autoGeneratedKeys)
			throws SQLException {
		throw new UnsupportedOperationException();

	}

	@Override
	public int executeUpdate(final String sql, final int[] columnIndexes)
			throws SQLException {
		throw new UnsupportedOperationException();

	}

	@Override
	public int executeUpdate(final String sql, final String[] columnNames)
			throws SQLException {
		throw new UnsupportedOperationException();

	}

	@Override
	public Connection getConnection() throws SQLException {
		if (!opened) {
			log.error("Invalid use of a closed statement.");
			throw new SQLException("This statement is closed.");
		}

		return connection;
	}

	@Override
	public int getFetchDirection() throws SQLException {
		throw new UnsupportedOperationException();

	}

	@Override
	public int getFetchSize() throws SQLException {
		throw new UnsupportedOperationException();

	}

	@Override
	public ResultSet getGeneratedKeys() throws SQLException {
		throw new UnsupportedOperationException();

	}

	@Override
	public int getMaxFieldSize() throws SQLException {
		throw new UnsupportedOperationException();

	}

	@Override
	public int getMaxRows() throws SQLException {
		throw new UnsupportedOperationException();

	}

	@Override
	public boolean getMoreResults() throws SQLException {
		throw new UnsupportedOperationException();

	}

	@Override
	public boolean getMoreResults(final int current) throws SQLException {
		throw new UnsupportedOperationException();

	}

	@Override
	public int getQueryTimeout() throws SQLException {
		throw new UnsupportedOperationException();
	}

	@Override
	public ResultSet getResultSet() throws SQLException {
		if (!opened) {
			log.error("Invalid use of a closed statement.");
			throw new SQLException("This statement is closed.");
		}

		return resultSet;
	}

	@Override
	public int getResultSetConcurrency() throws SQLException {
		throw new UnsupportedOperationException();

	}

	@Override
	public int getResultSetHoldability() throws SQLException {
		throw new UnsupportedOperationException();

	}

	@Override
	public int getResultSetType() throws SQLException {
		throw new UnsupportedOperationException();

	}

	@Override
	public int getUpdateCount() throws SQLException {
		if (!opened) {
			log.error("Invalid use of a closed statement.");
			throw new SQLException("This statement is closed.");
		}

		return dbms.getUpdateCount();
	}

	@Override
	public SQLWarning getWarnings() throws SQLException {
		throw new UnsupportedOperationException();

	}

	@Override
	public boolean isClosed() throws SQLException {
		throw new UnsupportedOperationException();

	}

	@Override
	public boolean isCloseOnCompletion() throws SQLException {
		throw new UnsupportedOperationException();

	}

	@Override
	public boolean isPoolable() throws SQLException {
		throw new UnsupportedOperationException();

	}

	@Override
	public boolean isWrapperFor(final Class<?> iface) throws SQLException {
		throw new UnsupportedOperationException();

	}

	@Override
	public void setCursorName(final String name) throws SQLException {
		throw new UnsupportedOperationException();

	}

	@Override
	public void setEscapeProcessing(final boolean enable) throws SQLException {
		throw new UnsupportedOperationException();

	}

	@Override
	public void setFetchDirection(final int direction) throws SQLException {
		throw new UnsupportedOperationException();

	}

	@Override
	public void setFetchSize(final int rows) throws SQLException {
		throw new UnsupportedOperationException();

	}

	@Override
	public void setMaxFieldSize(final int max) throws SQLException {
		throw new UnsupportedOperationException();

	}

	@Override
	public void setMaxRows(final int max) throws SQLException {
		throw new UnsupportedOperationException();

	}

	public void setOpened() {
		opened = true;
	}

	@Override
	public void setPoolable(final boolean poolable) throws SQLException {
		throw new UnsupportedOperationException();

	}

	@Override
	public void setQueryTimeout(final int seconds) throws SQLException {
		throw new UnsupportedOperationException();
	}

	@Override
	public <T> T unwrap(final Class<T> iface) throws SQLException {
		throw new UnsupportedOperationException();

	}
}
